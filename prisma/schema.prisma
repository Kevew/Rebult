// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     Boolean?
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  createdPapers     Paper[]        @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]

  joinedAt   DateTime  @default(now())
  username String? @unique

  privateAccount Boolean?
  aboutMeDescription String? @db.LongText

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Highlight   Highlight[]
  HighlightVote HighlightVote[]
  HighlightComment     HighlightComment[]
  HighlightCommentVote HighlightCommentVote[]
}


model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  authorId  String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentId String?
}

model Subreddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  highlights Highlight[]

  creatorId   String?
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  paper Paper? // subreddit can only have one paper

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  comments    Comment[] 
  votes       Vote[]
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model Paper {
  id String @id @default(cuid())

  creator User @relation("CreatedBy", fields:[creatorId], references: [id])
  creatorId String
  createdAt DateTime? @default(now())

  name String @unique
  pdf String
  subreddit Subreddit @relation(fields: [subredditId], references: [id]) // each paper can only have one subreddit pointing to it
  subredditId String @unique // no two papers can have the same subreddit
  // therefore, for each subreddit there is at most one paper, and no two subreddits can share the same paper
}

model Highlight {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  
  author User @relation(fields: [authorId], references: [id])
  authorId String

  comment Json
  content Json
  position Json

  subreddit Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  comments HighlightComment[]
  votes  HighlightVote[]
}

model HighlightVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  highlight Highlight @relation(fields: [highlightID], references: [id], onDelete: Cascade)
  highlightID String
  type   VoteType

  @@id([userId, highlightID])
}

model HighlightComment {
  id        String   @id @default(cuid())
  content   Json
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  highlight      Highlight?    @relation(fields: [highlightID], references: [id], onDelete: Cascade)
  highlightID    String

  replyToId String?
  replyTo   HighlightComment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   HighlightComment[] @relation("ReplyTo")

  votes     HighlightCommentVote[]
  commentId String?
}

model HighlightCommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   HighlightComment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}